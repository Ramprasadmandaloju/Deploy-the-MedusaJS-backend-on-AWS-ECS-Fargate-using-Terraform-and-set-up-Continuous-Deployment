AWS Resources Setup for MedusaJS Deployment on ECS Fargate (via Terraform)

Objective
Provision all AWS resources required to deploy the MedusaJS backend using ECS Fargate.

---
 Prerequisites
- AWS CLI installed and configured (`aws configure`)
- Terraform installed
- AWS IAM user with `AdministratorAccess`
- GitHub repository for Medusa backend ready
- MedusaJS backend with Dockerfile

---

## Step-by-Step Instructions

###  Step 1: Initialize Terraform Project
```bash
mkdir terraform
cd terraform
touch main.tf variables.tf outputs.tf
terraform init
```

###  Step 2: VPC and Networking Setup
```hcl
resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = { Name = "medusa-vpc" }
}

resource "aws_subnet" "public_a" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "us-east-1a"
  map_public_ip_on_launch = true
  tags = { Name = "public-subnet-a" }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id
  tags = { Name = "medusa-igw" }
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }
  tags = { Name = "public-rt" }
}

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.public_a.id
  route_table_id = aws_route_table.public.id
}
```

### Step 3: Create Security Group
```hcl
resource "aws_security_group" "ecs_sg" {
  name        = "ecs-sg"
  description = "Allow inbound traffic"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 9000
    to_port     = 9000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = { Name = "ecs-sg" }
}
```

### Step 4: IAM Roles
```hcl
resource "aws_iam_role" "ecs_task_execution" {
  name = "ecsTaskExecutionRole"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action    = "sts:AssumeRole",
      Effect    = "Allow",
      Principal = { Service = "ecs-tasks.amazonaws.com" }
    }]
  })

  tags = { Name = "ecs-task-execution-role" }
}

resource "aws_iam_role_policy_attachment" "ecs_policy" {
  role       = aws_iam_role.ecs_task_execution.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}
```

### Step 5: Create ECR Repository
```hcl
resource "aws_ecr_repository" "medusa" {
  name = "medusa-server"
  image_scanning_configuration { scan_on_push = true }
}
```

### Step 6: ECS Cluster + Task + Service
```hcl
resource "aws_ecs_cluster" "medusa" {
  name = "medusa-cluster"
}

resource "aws_ecs_task_definition" "medusa" {
  family                   = "medusa-task"
  requires_compatibilities = ["FARGATE"]
  network_mode             = "awsvpc"
  cpu                      = "256"
  memory                   = "512"
  execution_role_arn       = aws_iam_role.ecs_task_execution.arn
  container_definitions = jsonencode([{
    name      = "medusa"
    image     = "${aws_ecr_repository.medusa.repository_url}:latest"
    essential = true
    portMappings = [{ containerPort = 9000, hostPort = 9000 }]
  }])
}

resource "aws_ecs_service" "medusa" {
  name            = "medusa-service"
  cluster         = aws_ecs_cluster.medusa.id
  task_definition = aws_ecs_task_definition.medusa.arn
  desired_count   = 1
  launch_type     = "FARGATE"
  network_configuration {
    subnets          = [aws_subnet.public_a.id]
    assign_public_ip = true
    security_groups  = [aws_security_group.ecs_sg.id]
  }
  depends_on = [aws_iam_role_policy_attachment.ecs_policy]
}
```

### Step 7: Outputs
```hcl
output "ecr_repo_url" {
  value = aws_ecr_repository.medusa.repository_url
}
```

### Step 8: Deploy
```bash
terraform init
terraform apply
```

---

##Summary of Resources

| Resource Type       | Description                       |
|---------------------|-----------------------------------|
| VPC/Subnet/IGW      | Networking setup for ECS          |
| ECS Cluster         | Environment to run containers     |
| ECS Task & Service  | Run and manage container lifecycle|
| ECR Repository      | Store Docker image                |
| IAM Roles           | Allow ECS to access ECR and logs  |
| Security Group      | Allow port 9000 traffic           |
| Outputs             | Print ECR URL                     |

---

You're now ready to integrate this infrastructure with GitHub Actions for continuous deployment!
