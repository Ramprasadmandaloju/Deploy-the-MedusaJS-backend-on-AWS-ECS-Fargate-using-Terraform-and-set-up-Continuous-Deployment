 Standard Operating Procedure (SOP)
🚀 Deploying Medusa Headless Commerce Backend on AWS ECS with Terraform and GitHub Actions
📌 Objective
This SOP outlines the step-by-step instructions to deploy the MedusaJS backend on AWS ECS (Fargate) using Terraform and implement a CI/CD pipeline using GitHub Actions.

📁 Project Structure
bash
Copy
Edit
medusa-aws-deployment/
├── .github/workflows/deploy.yml     # GitHub Actions pipeline
├── terraform/                       # Terraform files for AWS infrastructure
│   ├── main.tf
│   ├── variables.tf
│   └── outputs.tf
├── medusa-server/                   # MedusaJS backend (Dockerized)
│   └── Dockerfile
└── README.md or SOP.md              # This SOP
✅ Prerequisites
AWS Account

GitHub Account

Tools installed:

Docker

Terraform

Node.js (v16+)

AWS CLI

🔧 Step-by-Step Instructions
🔹 1. Clone the Repository
bash
Copy
Edit
git clone https://github.com/YOUR_USERNAME/medusa-aws-deployment.git
cd medusa-aws-deployment
🔹 2. Set Up AWS CLI
bash
Copy
Edit
aws configure
Provide:

AWS Access Key ID

AWS Secret Access Key

Default region (e.g., us-east-1)

Default output format (press Enter for none)

🔹 3. (Optional) Build and Push Docker Image to ECR
This step can also be handled by GitHub Actions (Step 7).

bash
Copy
Edit
cd medusa-server
docker build -t medusa-server .
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <AWS_ID>.dkr.ecr.us-east-1.amazonaws.com
docker tag medusa-server:latest <AWS_ID>.dkr.ecr.us-east-1.amazonaws.com/medusa-server:latest
docker push <AWS_ID>.dkr.ecr.us-east-1.amazonaws.com/medusa-server:latest
🔹 4. Deploy AWS Infrastructure with Terraform
bash
Copy
Edit
cd terraform
terraform init
terraform apply
This will provision:

ECS Cluster & Fargate service

IAM roles

ECS Task Definition

Networking (you provide existing subnet IDs & security group)

🔹 5. Set Up GitHub Repository
Create a new GitHub repo

Push your local files:

bash
Copy
Edit
git init
git remote add origin https://github.com/YOUR_USERNAME/medusa-aws-deployment.git
git add .
git commit -m "Initial commit"
git push -u origin main
🔹 6. Add GitHub Secrets for CI/CD
Go to: GitHub → Repo → Settings → Secrets → Actions → New repository secret

Add the following:

Name	Value
AWS_ACCESS_KEY_ID	Your AWS Access Key ID
AWS_SECRET_ACCESS_KEY	Your AWS Secret Key
🔹 7. Trigger GitHub Actions Pipeline
Whenever you push code to the main branch, the workflow at .github/workflows/deploy.yml will:

Build Docker image

Push to ECR

Force ECS Fargate to redeploy latest container

🔹 8. Access the Medusa Backend
Get the public IP of your ECS service (from the AWS Console).

Access the Medusa backend:

arduino
Copy
Edit
http://<public-ip>:9000/store/products
🎥 Video Walkthrough
📹 Link to Video: [Add your YouTube link here — must show your face and explain each part]

🧼 Cleanup
To destroy the infrastructure and avoid charges:

bash
Copy
Edit
cd terraform
terraform destroy
📎 Notes
The Dockerfile assumes a Node.js project is present in medusa-server/.

You can use the Medusa starter CLI:

bash
Copy
Edit
npx create-medusa-app@latest
Let me know if you'd like me to convert this into a downloadable .md file or directly push this into your GitHub repo's README.md.








